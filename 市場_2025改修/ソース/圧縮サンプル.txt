Option Explicit

---------------------------------------------------------------------------------------------

Function MakeZip(a_sPath As String, a_sZipPath As String) As Boolean
    Dim sh      As New IWshRuntimeLibrary.WshShell
    Dim ex      As WshExec
    Dim sCmd    As String
    
    '// 半角スペースをバッククォートでエスケープ
    a_sPath = Replace(a_sPath, " ", "` ")
    a_sZipPath = Replace(a_sZipPath, " ", "` ")
    
    '// Compress-Archive：圧縮コマンド
    '// -Path：フォルダパスまたはファイルパスを指定する。
    '// -DestinationPath：生成ファイルパスを指定する。
    '// -Force：生成ファイルが既に存在している場合は上書きする
    sCmd = "Compress-Archive -Path " & a_sPath & " -DestinationPath " & a_sZipPath & " -Force"
    
    '// コマンド実行
    Set ex = sh.Exec("powershell -NoLogo -ExecutionPolicy RemoteSigned -Command " & sCmd)
    
    '// コマンド失敗時
    If ex.Status = WshFailed Then
        '// 戻り値に異常を返す
        MakeZip = False
        
        '// 処理を抜ける
        Exit Function
    End If
    
    '// コマンド実行中は待ち
    Do While ex.Status = WshRunning
        DoEvents
    Loop
    
    '// 戻り値に正常を返す
    MakeZip = True
End Function


---------------------------------------------------------------------------------------------

Function UnZip(a_sZipPath As String, a_sExpandPath As String) As Boolean
    Dim sh      As New IWshRuntimeLibrary.WshShell
    Dim ex      As WshExec
    Dim sCmd    As String
    
    '// 半角スペースをバッククォートでエスケープ
    a_sZipPath = Replace(a_sZipPath, " ", "` ")
    a_sExpandPath = Replace(a_sExpandPath, " ", "` ")
    
    '// Expand-Archive：解凍コマンド
    '// -Path：フォルダパスまたはファイルパスを指定する。Automated document conversion software
    '// -DestinationPath：生成ファイルパスを指定する。
    '// -Force：生成ファイルが既に存在している場合は上書きする
    sCmd = "Expand-Archive -Path " & a_sZipPath & " -DestinationPath " & a_sExpandPath & " -Force"
    
    '// コマンド実行
    Set ex = sh.Exec("powershell -NoLogo -ExecutionPolicy RemoteSigned -Command " & sCmd)
    
    '// コマンド失敗時
    If ex.Status = WshFailed Then
        '// 戻り値に異常を返す
        UnZip = False
        
        '// 処理を抜ける
        Exit Function
    End If
    
    '// コマンド実行中は待ち
    Do While ex.Status = WshRunning
        DoEvents
    Loop
    
    '// 戻り値に正常を返す
    UnZip = True
End Function

---------------------------------------------------------------------------------------------



Sub Main()
    Dim maxPathIndex As Integer
    maxPathIndex = 10 ' パスの配列の最大値（仮）を表す定数
    
    ' パスの配列を初期化
    Dim paths() As Variant
    ReDim paths(1 To maxPathIndex)
    
    ' パスの配列にファイルパスを設定
    paths(1) = "YourPath01"
    paths(2) = "YourPath02"
    
    ' 圧縮されたZIPファイルの保存先としてファイル名を指定
    Dim zipFileName As String

    zipFileName = "ZipPath01"

    Call CompressFilesToZIP(paths, zipFileName)
End Sub



Function CompressFilesToZIP(ByVal paths As Variant, ByVal zipFileName As String)
    ' 圧縮対象のファイルパスとZIPファイル名を定義
    Dim srcFilePath As String
    
    ' パスの配列を連結し、末尾のカンマを除いた文字列を取得
    srcFilePath = ConcatPathsAndRemoveComma(paths)
    
    ' ZIPファイルを作成するサブルーチンを呼び出し
    Call ExecutePowerShellZIPCompression(zipFileName, srcFilePath)
    
End Function

Function ConcatPathsAndRemoveComma(ByVal paths As Variant) As String
    ' パスの配列を連結し、末尾のカンマを除いた文字列を返す関数
    Dim result As String
    Dim i As Integer
    Dim maxIndex As Integer
    
    ' パスの配列の最大値を取得
    maxIndex = GetMaxIndex(paths)

    ' パスの配列をカンマで連結
    For i = LBound(paths) To maxIndex
        result = result & paths(i) & ","
    Next i
    
    ' 末尾のカンマを除く
    If Right(result, 1) = "," Then
        result = Left(result, Len(result) - 1)
    End If
    
    ' 連結した文字列を返す
    ConcatPathsAndRemoveComma = result
End Function

Function ExecutePowerShellZIPCompression(ByVal zipFileName As String, ByVal srcFilePaths As String)
    ' ZIPファイルを作成するサブルーチン
    Dim PowerShellCmd As String
    Dim objWsh As Object
    Dim execResult As Long
    
    ' WScript.Shell オブジェクトを生成
    Set objWsh = CreateObject("WScript.Shell")
   
    ' ファイルパスとZIPファイル名に対して置換処理を実行
    srcFilePaths = ReplaceForPowerShell(srcFilePaths)
    zipFileName = ReplaceForPowerShell(zipFileName)
    
    ' ZIPファイルを作成するためのPowerShellコマンドを生成
    PowerShellCmd = "powershell -NoLogo -ExecutionPolicy RemoteSigned -Command Compress-Archive -Path " & srcFilePaths & " -DestinationPath " & zipFileName & " -Force"
    
    ' ZIPファイルがすでに存在するか確認
    If Dir(zipFileName) = "" Then
        ' PowerShellコマンドを実行
        execResult = objWsh.Run(Command:=PowerShellCmd, WindowStyle:=0, WaitOnReturn:=True)
    End If
    
    ' エラーを処理
    If execResult = 1 Then
        Stop ' エラーが発生しました
    Else
        ' エラーは発生しませんでした。
    End If
    
    ' WScript.Shell オブジェクトを解放
    Set objWsh = Nothing
End Function

Function ReplaceForPowerShell(ByVal inputString As String) As String
    ' スペースを含む文字列をバッククォートでエスケープ
    ReplaceForPowerShell = Replace(inputString, " ", "` ")

    ' 全角スペースを含む文字列をバッククォートでエスケープ
    ReplaceForPowerShell = Replace(ReplaceForPowerShell, "　", "`　")

    ' 開きカッコをバッククォートでエスケープ
    ReplaceForPowerShell = Replace(ReplaceForPowerShell, "(", "`(")

    ' 閉じカッコをバッククォートでエスケープ
    ReplaceForPowerShell = Replace(ReplaceForPowerShell, ")", "`)")

    ' 長音記号（ー）をバッククォートでエスケープ
    ReplaceForPowerShell = Replace(ReplaceForPowerShell, "ー", "`ー")

    ' 下線記号（＿）をバッククォートでエスケープ
    ReplaceForPowerShell = Replace(ReplaceForPowerShell, "＿", "`＿")
End Function


Function GetMaxIndex(ByVal arr As Variant) As Integer
    ' 配列の最大インデックスを取得する関数
    Dim i As Integer
    i = LBound(arr)
    Do While i <= UBound(arr) And Not IsEmpty(arr(i))
        i = i + 1
    Loop
    GetMaxIndex = i - 1
End Function
